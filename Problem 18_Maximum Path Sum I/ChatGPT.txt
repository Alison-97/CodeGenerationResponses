using System;

class Program
{
    static void Main()
    {
        int[][] triangle =
        {
            new[] { 75 },
            new[] { 95, 64 },
            new[] { 17, 47, 82 },
            new[] { 18, 35, 87, 10 },
            new[] { 20, 4, 82, 47, 65 },
            new[] { 19, 1, 23, 75, 3, 34 },
            new[] { 88, 2, 77, 73, 7, 63, 67 },
            new[] { 99, 65, 4, 28, 6, 16, 70, 92 },
            new[] { 41, 41, 26, 56, 83, 40, 80, 70, 33 },
            new[] { 41, 48, 72, 33, 47, 32, 37, 16, 94, 29 },
            new[] { 53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14 },
            new[] { 70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57 },
            new[] { 91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48 },
            new[] { 63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31 },
            new[] { 4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23 }
        };

        int result = FindMaximumTotal(triangle);
        Console.WriteLine("The maximum total from top to bottom is: " + result);
    }

    static int FindMaximumTotal(int[][] triangle)
    {
        int height = triangle.Length;
        int[][] dp = new int[height][];

        // Copy the triangle values to the dp array
        for (int i = 0; i < height; i++)
        {
            dp[i] = new int[triangle[i].Length];
            Array.Copy(triangle[i], dp[i], triangle[i].Length);
        }

        // Traverse the triangle from the second-last row up to the top
        for (int i = height - 2; i >= 0; i--)
        {
            for (int j = 0; j < dp[i].Length; j++)
            {
                // Calculate the maximum sum for the current position
                dp[i][j] += Math.Max(dp[i + 1][j], dp[i + 1][j + 1]);
            }
        }

        // The maximum total will be stored at the top of the triangle
        return dp[0][0];
    }
}
