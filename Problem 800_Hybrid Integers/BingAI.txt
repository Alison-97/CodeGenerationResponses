using System;
using System.Collections.Generic;
using System.Numerics;

class Program
{
    // A method to check if a number is prime
    static bool IsPrime(int n)
    {
        if (n <= 1) return false;
        if (n == 2) return true;
        if (n % 2 == 0) return false;
        for (int i = 3; i * i <= n; i += 2)
        {
            if (n % i == 0) return false;
        }
        return true;
    }

    // A method to find the prime factorization of a number
    static Dictionary<int, int> PrimeFactors(BigInteger n)
    {
        Dictionary<int, int> factors = new Dictionary<int, int>();
        for (int i = 2; i <= Math.Sqrt((double)n); i++)
        {
            if (IsPrime(i))
            {
                while (n % i == 0)
                {
                    n /= i;
                    if (factors.ContainsKey(i))
                    {
                        factors[i]++;
                    }
                    else
                    {
                        factors.Add(i, 1);
                    }
                }
            }
        }
        if (n > 1)
        {
            if (factors.ContainsKey((int)n))
            {
                factors[(int)n]++;
            }
            else
            {
                factors.Add((int)n, 1);
            }
        }
        return factors;
    }

    // A method to check if a number is a hybrid-integer
    static bool IsHybrid(BigInteger n)
    {
        Dictionary<int, int> factors = PrimeFactors(n);
        if (factors.Count != 2) return false;
        foreach (var pair in factors)
        {
            if (!IsPrime(pair.Value)) return false;
        }
        return true;
    }

    // A method to count the number of hybrid-integers less than or equal to n
    static int C(BigInteger n)
    {
        int count = 0;
        for (BigInteger i = 2; i <= n; i++)
        {
            if (IsHybrid(i)) count++;
        }
        return count;
    }

    static void Main(string[] args)
    {
        BigInteger n = BigInteger.Pow(800800, 800800);
        Console.WriteLine(C(n));
    }
}
